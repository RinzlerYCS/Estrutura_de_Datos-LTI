import datetime as dt
import re
import openpyxl

bandera_principal = True
notas_borradas = [3]
fecha_actual = dt.date.today()
numero_folio = 0
rfcconsulta={}
notas_taller = {}
detalles_precio = []
detalles_service = []
def validar_fecha(fecha):
    try:
        dt.datetime.strptime(fecha, "%d/%m/%Y")
        return True
    except ValueError:
        return False

while bandera_principal:
    print("\n|*****|")
    print("BIENVENIDO A TALLER PITONICO \n")
    try:
        decision_menu = int(input("QUE OPCION DESEA ELEGIR\n1-Registrar una nota \n2-Consultas y reportes \n3-Cancelar nota \n4-Recuperar nota \n5-Salir del sistema \n"))
    except ValueError:
        print("Por favor, ingrese un número válido.")
        continue

    if decision_menu ==1:   #DATOS A PEDIR \NOMBRE \FECHA \RFC  \ CORREO ELEC  \SERVICIO(S), SE CALCULA EL TOTAL A PAGAR
        print(f"ELIGIO LA OPCION DE REGISTRO DE NOTA\n")     
        while True:
            nombre_registro=input("Ingrese su nombre: ")       ##Y CAMBIAR LA BUSQUEDA POR ENTEROS
            if nombre_registro.strip()=="":
                print("EL DEBE NO DEBE ESTAR EN BLANCO")
                continue
            else:
                break
        numero_folio+=1
        while True:
            try:
                fecha_registro_nota=input("Ingrese su fecha con el formato (dd/mm/aaaa): ")#SE PIDE LA FECHA DEL USUARIO
                if fecha_registro_nota.strip()=="":
                    print("EL DATO NO DEBE DE OMITIRSE")
                    continue
                fecha_procesada = dt.datetime.strptime(fecha_registro_nota, "%d/%m/%Y").date()
            except ValueError:
                print("El dato ingresado no cumple con el formato (dd/mm/yy)")
                continue
            if fecha_procesada>fecha_actual:            #SE VERIFICA QUE LA FECHA NO SEA posterior A LA ACTUAL
                print("La fecha que usted ingreso es invalida, su fecha no debe ser posterior a la actual")  
                continue
            else: 
                break
            
        while True:####SE VALIDA QUE EL RFC DADO POR EL USUARUI SEA CORRECTO
            patron_rfc = (r'^[A-Z&Ñ]{3,4}\d{6}[A-V1-9][A-Z1-9]\d{1}$')
            rfc_usuario = input("Introduce tu RFC: ")
            if rfc_usuario.strip()=="":
                print("EL DATO NO DEBE DE OMITIRSE")
                continue
            if re.match(patron_rfc, rfc_usuario):
                break
            else:
                print("RFC inválido, vuelva a ingresarlo")
                continue
            
        while True:##############SE VALIDA EL CORREO ELECTRONICO CON EL DEBIDO PATRON
            patron_correo = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            correo = input("Ingrese una dirección de correo electrónico: ")
            if correo.strip()=="":
                print("EL DATO NO DEBE DE OMITIRSE, VUELVA A INGRESARLO")
                continue
            if re.match(patron_correo, correo):
                break
            else:
                print("La dirección de correo electrónico no es válida.")
                continue
             
        while True:   #SE PREGUNTARAM LOS SERVICIOS A ELEGIR
            nombre_de_servicio_realizado=input("Ingresa los detalles de la nota: ")       #NO DEBE OMITIRSE
            if nombre_de_servicio_realizado.strip()=="":            #VALIDACION PARA QUE NO SE OMITA
                print("El campo no debe de estar vacio, favor de ingresar de nuevo")
                continue
            while True:    
                try:    
                    precio_detalle_service=float(input("Ingrese el precio del servicio: "))        
                    if precio_detalle_service <=0:
                        print("El precio debe de ser mayor que cero, ingrese de nuevo el valor")
                        continue
                    else: 
                        break
                except ValueError:
                    print("EL DATO QUE DEBE DE SER NUMERICO")
                    continue
            detalles_service.append(nombre_de_servicio_realizado)  #INGRESAN DETALLES TIPO STR
            detalles_precio.append(precio_detalle_service)#INGRESAN EL COSTO X SERVICIO FLOAT
            while True:
                servicio_extra=input("¿Desesa agregar otro servicio? SI/NO: ") 
                if servicio_extra.strip()=="":
                    print("EL DATO NO DEBE DE OMITIRSE")
                    continue
                elif servicio_extra.upper()=="NO":
                    break
                elif servicio_extra.upper()=="SI":
                    break
                else:
                    print("DEBE SUMPLIR CON EL PATRON SI/NO")
                    continue
            if servicio_extra.upper()=="SI":
                continue
            else:       #SI LLEGO HASTA AQUI ES POR QUE PROPOCIONO TODOS LOS DATOS NECESARIOS
                print()
                tot=0
                print(f'|{"NOTA":^28}|')            ###TODA ESTA ESTRUCTURA NO ES NECESARIA
                print(f'{"="*30}')                  ###PERO SIRVE COMO VISUALIZADOR DE LA NOTA
                print(f"Folio: {numero_folio}\t Fecha: {fecha_procesada}\tCliente: {nombre_registro}\tRFC: {rfc_usuario} \tCorreo: {correo}")    
                for service,precio in zip(detalles_service,detalles_precio):  
                        print(f'|Servicio: {service:<18} {precio}|')
                for b in detalles_precio:      #LOS VALORES DE LOS SERVICIOS DE SUMAN PARA DAR EL TOTAL
                    tot+=b
                print(f'|Total: {tot:<18}|')
                notas_taller[numero_folio]=(fecha_procesada,nombre_registro,tot,[i for i in detalles_service],detalles_precio,correo,rfc_usuario)
                #AQUI SE AGREGAN LOS ELEMENTOS AL DICCIONARIO
                
                print("\nLA NOTA SE HA REGISTRADO EXITOSAMENTE")
                detalles_precio.clear()
                detalles_service.clear()
                break

    elif decision_menu == 2:#################CAMBIO 23/09/2023   1:21 AM######################################
        while True:
            while True:     #LAS CONSULTAS TIENE QUE SER POR MEDIO DE NUMEROS
                try:
                    submenu = int(input("Qué opción desea seleccionar:\n1-Consulta por periodo\n2-Consulta por folio\n3-Consulta por RFC\n4-Regresar al menu principal"))
                    if submenu >=4 or submenu <=0:
                        print("EL DATO ESTA FUERA DE RANGO, ELIGA LA OPCION 1 O 2")
                        continue
                    else:           ##ESTE APARTADO SE ENCARGA DE LAS CONDICIONES: QUE ESTE EN EL RANGO Y QUE SEA NUMERICO 
                        break          ##PARA LOS SUBMENUS####
                except ValueError:
                    print("INGRESE UN VALOR NUMERICO")
                    continue####################################################################################

            if submenu== 1:
                
                while True:
                    try:
                        fecha_inicio = input("Ingrese la fecha inicial del periodo, en formato dd/mm/aaaa:\n")
                        if fecha_inicio.strip()=="":
                            print("EL DATO NO DEBE DE OMITIRSE, FAVOR DE INGRESAR DE NUEVO")
                            continue   #####AGREGAR VALIDACION PARA LA FECHA DENTRO DE ESTE BLOQUE DE CODIGO
                        fecha_inicio = dt.datetime.strptime(fecha_inicio, "%d/%m/%Y").date() 
                    except ValueError:
                        print("El dato ingresado no cumple con el patron (dd/mm/yy)")
                        continue
                    
                    while True:
                        try:             
                            fecha_final = input("Ingrese la fecha final del periodo, en formato dd/mm/aaaa:\n")
                            if fecha_final.strip()=="":
                                print("EL DATO NO DEBE DE OMITIRSE, VUELVA A INGRESAR LA FECHA")
                                continue
                            fecha_final = dt.datetime.strptime(fecha_final, "%d/%m/%Y").date()
                        except ValueError:
                            print("El dato ingresado no cumple con el patron (dd/mm/yy)")
                            continue   
                        break
                    break 
                while True:

                    notas_periodo = {folio: nota for folio, nota in notas_taller.items() if
                                    fecha_inicio <= nota[2] <= fecha_final and folio not in notas_borradas}

                    if notas_periodo:
                        print("\n \n ")
                        print(f"Notas correspondientes al período: {fecha_inicio} -- {fecha_final}")
                        for folio, nota in notas_periodo.items():
                            print(f"Folio: {folio}")
                            print(f"Fecha: {nota[2]}")
                            print(f"Cliente: {nota[0]}")
                            print(f"Total: ${nota[3]}")
                            print("-" * 30)
                    else:
                        print("No hay notas emitidas para dicho período.")
                    break

            if submenu == 2: #CAMBIAMOS LAS CADENAS POR NUMEROS
                while True:
                    try:
                        consulta_folio = int(input("Ingrese el folio a consultar:\n"))
                        if consulta_folio in notas_taller.keys() and consulta_folio not in notas_borradas:
                            print("FOLIO EXISTENTE \n")
                            ppp=notas_taller.get(consulta_folio)  #NOS REGRESA UNA TUPLA
                            print(f'|{"NOTA":^28}|')
                            print(f"Folio: {consulta_folio}\t Fecha: {fecha_procesada}\tCliente:{ppp[0]}\tRFC: {rfc_usuario}\tCorreo: {correo}")
                            for a in ppp[1]:
                                print(f"|{a:<19}|")
                            
                            print(f"|Total: {ppp[3]:<19}|")
                            
                        else:
                            print("FOLIO NO EXISTENTE O NO SE ENCUENTRA EN EL SISTEMA")
                            #####CUANDO INGRESAMOS UN FOLIO FUERA DE RANGO O BORRANDO NOS REGRESA AL SUB MENU (CONSULTAS(FOLIO,PERIODO Y REGRESO))
                    except ValueError:
                        print("Por favor, ingrese un número válido para el folio.")
                        continue
                    break
            
            if submenu==3:
                rfc_list = sorted(list(notas_taller.values()), key=lambda x: x[6])
                for index, nota in enumerate(rfc_list, start=1):
                    print(f"Nota {index}:")
                    print(f"Folio RFC: {index}\tRFC: {nota[6]}")
                rfc_consulta = input("Ingrese el RFC a consultar:\n")
                notas_rfc = [nota for nota in notas_taller.values() if nota[6] == rfc_consulta]
                if not notas_rfc:
                    print(f"No se encontraron notas para el RFC {rfc_consulta}")
                    break
                else:
                    # Calcula el monto promedio
                    montos = [nota[2] for nota in notas_rfc]
                    monto_promedio = sum(montos) / len(montos)

                    # Mostrar información de notas
                    for nota in notas_rfc:
                        print("Detalles de la nota:")
                        print(f"Folio: {nota[3]}\tFecha: {nota[0]}\tCliente: {nota[1]}\tRFC: {nota[6]}\tCorreo: {nota[5]}")
                        for i, servicio in enumerate(nota[4]):
                            print(f"Servicio {i + 1}: {servicio}\tPrecio: {nota[3][i]}")
                        print(f"Total a pagar: {nota[2]}\n")

                    # Preguntar si desea exportar a Excel
                    exportar_excel = input("¿Desea exportar esta información a un archivo Excel? (SI/NO): ")
                    if exportar_excel.upper() == "SI":
                        # Crear un nuevo libro de Excel
                        workbook = openpyxl.Workbook()
                        sheet = workbook.active

                        # Agregar encabezados
                        sheet.append(["Folio", "Fecha", "Cliente", "RFC", "Correo", "Detalles", "Total"])

                        # Agregar datos de las notas
                        for nota in notas_rfc:
                            servicios = ", ".join(service)
                        # Asegúrate de que todos los valores sean de tipo cadena (str)
                        fecha = str(fecha_procesada)  # Convierte la fecha a cadena
                        cliente = str(nombre_registro)  # Convierte el cliente a cadena
                        rfc = str(rfc_usuario)  # Convierte el RFC a cadena
                        correo2 = str(correo)  # Convierte el correo a cadena
                        total = str(tot)  # Convierte el total a cadena
                        sheet.append([numero_folio, fecha, cliente, rfc, correo2, servicios, total])
                      
                        # Generar el nombre del archivo Excel
                        fecha_hoy = dt.datetime.now().strftime("%Y%m%d%H%M%S")
                        nombre_archivo = f"{rfc_consulta}_{fecha_hoy}.xlsx"

                        # Guardar el libro de Excel
                        workbook.save(nombre_archivo)

                        print(f"Archivo Excel '{nombre_archivo}' generado exitosamente.")

                break

            elif submenu == 4:
                break

            else:
                print("Opción no válida. Por favor, seleccione una opción válida.")







    elif decision_menu == 3:
        print("INGRESO A LA OPCION CANCELAR")
        while True:
            try:
                nota_a_cancelar = int(input("Ingrese el folio: "))
                if nota_a_cancelar in notas_borradas:
                    print("LA NOTA QUE BUSCA NO SE ENCUENTRA EN EL SISTEMA O ESTÁ ELIMINADA")
                elif nota_a_cancelar in notas_taller.keys():
                    print("LA LLAVE QUE INGRESÓ ESTÁ EN EL DICCIONARIO")
                    print(f"Folio: {numero_folio}\t Fecha: {fecha_procesada}\tCliente: {nombre_registro}\tRFC: {rfc_usuario}\tCorreo: {correo}\tDetalle: {service}\tTotal a pagar: {tot}")
                    while True:
                        confirmacion = input("CONFIRME SI DESEA ELIMINAR LA NOTA (SI/NO): ")
                        if confirmacion.strip()=="":
                            print("EL DATO NO DEBE DE OMITIRSE, INGRESELO DE NUEVO")
                            continue
                        else:
                            break
                    if confirmacion.upper() == "SI":
                        notas_borradas.append(nota_a_cancelar)
                        print("LA NOTA SE HA BORRADO EXITOSAMENTE")
                    elif confirmacion.upper() == "NO":
                        print("LA NOTA NO SE HA CANCELADO")
                else:
                    print("LA NOTA QUE BUSCA NO SE ENCUENTRA EN EL SISTEMA")
            except ValueError:
                print("Por favor, ingrese un número válido para el folio.")
                continue
            else:
                break

    elif decision_menu == 4:
        print("OPCIÓN RECUPERAR NOTA")
        while True:
            print("LAS SIGUIENTES NOTAS ESTÁN CANCELADAS")
            for folio, nota in notas_taller.items():
                if folio in notas_borradas:
                    print(f"Folio {folio}\t Cliente: {nota[1]}\t Fecha: {nota[0]}")
            decision_recuperar_nota = input("¿DESEA RECUPERAR ALGUNA NOTA DE LAS PRESENTADAS? (SI/NO): ")
            if decision_recuperar_nota.upper() == "NO":
                break
            try:
                recuperar_nota = int(input("FOLIO A RECUPERAR: "))
                if recuperar_nota in notas_borradas:
                    for folio, nota in notas_taller.items():
                        if folio == recuperar_nota:
                            print(f"Folio: {numero_folio}\t Fecha: {fecha_procesada}\tCliente: {nombre_registro}\tRFC: {rfc_usuario}\tCorreo: {correo}\tDetalle: {nota[3]}\tTotal a pagar: {nota[2]}")
                    decision_recuperar = input("CONFIRME SI DESEA RECUPERAR LA NOTA (SI/NO): ")
                    if decision_recuperar.upper() == "SI":
                        notas_borradas.remove(recuperar_nota)  
                        print("LA NOTA SE HA RECUPERADO EXITOSAMENTE")
                        break
                else:
                    print("EL FOLIO QUE INGRESÓ NO ESTÁ EN NOTAS ELIMINADAS")
            except ValueError:
                print("Por favor, ingrese un número válido para el folio.")
                continue

    elif decision_menu == 5:
        break
    else:
        print("Opción no válida. Por favor, seleccione una opción válida.") 
